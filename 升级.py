import os
import re
import random


def 将Ocr识别返回的字符串格式化为列表(输入字符串):
    # 用|分割字符串
    split_list = 输入字符串.split("|")

    # 对每个分割后的子字符串再用,分割，并形成最终列表
    final_list = [item.split(",") for item in split_list]

    return final_list



def 升级建筑(op, 鼠标,打印状态,要升级的建筑物名称):
    """
    返回的建筑物价格可能会因为前面圣水,金币标志而导致前面多出一位数字,但是不影响升级,因为升级是否够资源是按照打开了升级界面后的颜色判断的
    :param op:
    :param 要升级的建筑物名称:
    :return: 返回,执行状态,是否为需要重启的致命性错误,指定建筑物需要的资源,资源类型
    """

    def 点击(x, y, 延时=300):
        鼠标.移动到(x+random.randint(0,10),y+random.randint(0,10))
        鼠标.左键点击()
        #
        # op.MoveTo(x, y)
        # op.LeftClick()
        op.Delay(延时)

    目前脚本工作目录 = os.getcwd()

    识别到的字符串 = None
    是否识别到指定建筑 = False
    打印状态(f"开始升级{要升级的建筑物名称}")
    #打开建筑升级的地方
    点击(415, 11)
    op.Delay(500)
    while 是否识别到指定建筑 is False:

        上一次建筑字符串 = 识别到的字符串  #将上一次次循环后的识别内容用一个变量保存起来,要不等等重新识别覆盖掉了.如果是第一次进入循环,None,如果已经经过循环了,识别到的字符串保存的当然是上一次循环的识别内容,

        print("开始识别建筑")
        识别到的字符串 = op.OcrEx(362, 71, 581, 388, "ffffff", 0.7)
        print("结束识别")
        # 将英文字母o和O都替换为数字0,因为识别可能将数字0错误地识别为英文字母o或O
        识别到的字符串 = 识别到的字符串.replace('o', '0').replace('O', '0')
        建筑和价格列表 = 将Ocr识别返回的字符串格式化为列表(识别到的字符串)
        print(识别到的字符串)

        #循环找建筑中,第一找那么打开建筑界面则判断是否正常打开,不是第一次就判断是否到底了
        if 上一次建筑字符串 is None:
            if not ("升级" in 识别到的字符串):
                打印状态("打开建筑升级栏失败")
                return f"打开建筑升级栏失败", True, -1, ""
                # break

        else:
            if 将Ocr识别返回的字符串格式化为列表(上一次建筑字符串)[-1][2] == 建筑和价格列表[-1][2]:
                # op.MoveTo(415, 11)
                # op.LeftClick()
                点击(415,11)
                op.Delay(1000)
                # print("滑到底部了")
                return f"滑到底部了,找不到指定的建筑", True, -1, ""
                # break
        #如果识别到的字符串包含了设定的建筑名称
        if 要升级的建筑物名称 in 识别到的字符串:
            for 第几个建筑物 in range(len(建筑和价格列表)):
                if 要升级的建筑物名称 in 建筑和价格列表[第几个建筑物][2]:
                    是否识别到指定建筑 = True

                    建筑所在x, 建筑所在y = int(建筑和价格列表[第几个建筑物][0]), int(建筑和价格列表[第几个建筑物][1])

                    #识别价格####
                    价格字符串 = op.OcrEx(建筑所在x + 50, 建筑所在y - 5, 建筑所在x + 250, 建筑所在y + 15, "ffffff", 0.7)
                    # print(价格字符串)
                    if 价格字符串 == "":
                        return f"确认升级建筑价格失败", True, -1, ""
                    # 识别引擎会混淆英文字母Oo,全部替换为0
                    价格字符串 = 价格字符串.replace('o', '0').replace('O', '0')
                    包含价格的字符串 = 价格字符串.split(",")[2]
                    # 使用正则表达式提取数字部分,剔除识别引擎错误识别多的奇怪符号,剔除完毕后转为整数
                    当前指定升级建筑的价格 = re.findall(r'\d+', 包含价格的字符串)[0]
                    当前指定升级建筑的价格 = int(当前指定升级建筑的价格)

                    # print("要升级的建筑物在", 第几个建筑物)
                    # print("价格为",当前指定升级建筑的价格)
                    # print("价格所在的坐标是", 建筑所在x, 建筑所在y)

                    #在基于建筑物名称偏移量确定的区域内确定升级建筑物的类型,该区域可以用下面代码截图查阅
                    # op.Capture(建筑所在x + 50, 建筑所在y - 5, 建筑所在x + 250, 建筑所在y + 15, "上一次识别建筑物价格的区域.bmp")
                    #0代表金币,1代表圣水
                    升级需要的资源类型, x, y = op.FindPic(建筑所在x + 50, 建筑所在y - 5, 建筑所在x + 250,
                                                          建筑所在y + 15,
                                                          目前脚本工作目录+r"\img\金币色块.bmp|"+目前脚本工作目录+r"\img\圣水色块.bmp",
                                                          "000000", 0.8,
                                                          0)

                    点击(x, y)
                    op.Delay(2000)

                    if 升级需要的资源类型 == 0:
                        # print("升级需要金币")
                        _, x, y = op.FindPic(243, 445, 700, 465,
                                             目前脚本工作目录 + r"\img\金币升级2.png",
                                             "000000", 0.8, 0)
                        # 打开升级页面
                        点击(x, y)
                        #返回0,那么是白色,否则不是
                        字体为白, _, _ = op.FindPic(369, 459, 421, 509,
                                                    目前脚本工作目录 + r"\img\白色色块.bmp",
                                                    "000000", 0.98, 0)
                        是否为红 = op.GetColor(127, 496) == "E1433F"  #升级框旁边不红,红了代表大本营等级不够,不能升级

                        if int(字体为白) == 0 and 是否为红 is False:
                            点击(414, 480)
                            # print(f"升级了{要升级的建筑物名称}耗资{当前指定升级建筑的价格}")
                            return f"升级了{要升级的建筑物名称}耗资{当前指定升级建筑的价格}", False, 当前指定升级建筑的价格, "金币"
                        else:
                            # 下一次判断建筑至少拥有金币=当前指定升级建筑的价格
                            # print(f"不够资源升级,升级{要升级的建筑物名称}需要{当前指定升级建筑的价格}金币")
                            # 关闭升级窗口
                            点击(415, 11)
                            op.Delay(1000)
                            return f"不够资源升级,升级{要升级的建筑物名称}需要{当前指定升级建筑的价格}金币", False, 当前指定升级建筑的价格, "金币"
                        # break

                    elif 升级需要的资源类型 == 1:
                        # print("升级需要圣水")
                        _, x, y = op.FindPic(243, 445, 700, 465,
                                             目前脚本工作目录+r"\img\圣水色块.bmp",
                                             "000000", 0.8, 0)
                        点击(x, y)
                        #返回0,那么是白色,否则不是
                        字体为白, _, _ = op.FindPic(369, 459, 421, 509,
                                                    目前脚本工作目录 + r"\img\白色色块.bmp",
                                                    "000000", 0.98, 0)
                        是否为红 = op.GetColor(127, 496) == "E1433F"  #升级框旁边不红,红了代表大本营等级不够,不能升级

                        if int(字体为白) == 0 and 是否为红 is False:

                            点击(414, 480)
                            # print(f"升级了{要升级的建筑物名称}耗资{当前指定升级建筑的价格}")
                            return f"升级了{要升级的建筑物名称}耗资{当前指定升级建筑的价格}", False, 当前指定升级建筑的价格, "圣水"
                        else:
                            下一次判断建筑至少拥有圣水 = 当前指定升级建筑的价格
                            # print(f"不够资源升级,等你圣水需要{当前指定升级建筑的价格}")
                            # 关闭升级窗口
                            点击(415, 11)
                            op.Delay(1000)
                            return f"不够资源升级,升级{要升级的建筑物名称}需要{当前指定升级建筑的价格}圣水", False, 当前指定升级建筑的价格, "圣水"
                        # break 是

                    else:
                        return f"无法确定升级资源的类型", True, -1, ""


        else:  #如果没有识别到的字符串包含了设定的建筑名称,往下滑动继续找
            # print("未找到要升级的建筑物")

            op.Delay(500)
            鼠标.移动到(467, 363)
            鼠标.左键按下()
            for _ in range(45):
                鼠标.移动相对位置(0, -5)
                op.Delay(5)
            鼠标.左键抬起()
            op.Delay(1000)
            print("下滑一下")
            # op.Delay(500)
            # op.MoveTo(467, 363)
            # op.LeftDown()
            # for _ in range(30):
            #     op.MoveR(0, -3)
            #     op.Delay(5)
            # op.LeftUp()
            # op.Delay(2000)

# op.SetWindowTransparent(雷电模拟器运行信息[1]["顶层窗口句柄"],255)
#
# op.SetWindowState(雷电模拟器运行信息[1]["顶层窗口句柄"], 11)
# # op.MoveWindow(雷电模拟器运行信息[1]["顶层窗口句柄"],1920,1080)
# op.SetWindowState(雷电模拟器运行信息[1]["绑定窗口句柄"], 11)
# op.MoveWindow(雷电模拟器运行信息[1]["顶层窗口句柄"],35,35)
# print(1111)
# print(op.GetWindowRect(雷电模拟器运行信息[1]["顶层窗口句柄"]))
